<?
	function loadMotionData($motion_id) {
		$path = MOTION_DATA_PATH.'/'.$motion_id.'/server.json';
		$data = file_get_contents($path);
		return json_decode($data);
	}

	function getMotionUrl($motion_data) {
		$url = $motion_data->protocol.'://';
		if($motion_data->username != '' && $motion_data->password != '') {
			$url .= $motion_data->username.':'.$motion_data->password.'@';
		}
		$port = ($motion_data->port);
		$url .=  $motion_data->server.':'.$port.'/';
		return $url;
	}

	function getThreadProperties($motion_data, $thread_number) {
		$url = getMotionUrl($motion_data).$thread_number.'/config/list';
		$data = file_get_contents($url);
		$vars = explode("\n", $data);
		$thread_data = array();
		foreach($vars as $pair) {
			$keyval = explode('=', $pair);
			if(count($keyval) > 1) {
				$val = (trim($keyval[1]) == '(null)') ? NULL : trim($keyval[1]);
				$thread_data[trim($keyval[0])] = $val;
			}
		}
		return $thread_data;
	}

	function setConfigValue($motion_data, $thread_number, $key, $value) {
		$url = getMotionUrl($motion_data).$thread_number.'/config/set?'.$key.'='.$value;
		$data = file_get_contents($url);
		return $data;
	}

	function writeConfigValue($motion_data, $thread_number) {
		$url = getMotionUrl($motion_data).$thread_number.'/config/writeyes';
		$data = file_get_contents($url);
		return $data;
	}

	function checkMainConfigWriteable($motion_data) {
		if(!is_writable($motion_data->config_file)) {
			return FALSE;
		}
		return TRUE;
	}

	function getMotionServers() {
		$path = MOTION_DATA_PATH.'/';
		$contents = scandir($path);
		$results = array();
		foreach($contents as $item) {
			if($item == '.' || $item == '..') {
				continue;
			}
			if(is_dir($path.$item)) {
				$json_file = $path.$item.'/server.json';
				if(file_exists($json_file)) {
					$motion_data = json_decode(file_get_contents($json_file));
					$motion_data->id = $item;
					array_push($results, $motion_data);
				}
			}
		}
		return $results;
	}

	function createMotionFile($camera) {
		$file_data = '';
		$file_data .= "# This file was generated by the IPCamViewer Web UI\n";
		$file_data .= 'netcam_url '.$camera->protocol.'://'.$camera->server.':'.$camera->port.'/'.$camera->camera_image."\n";
		$auth_info = '';
		if($camera->username) {
			$auth_info = $camera->username.':';
		}
		if($camera->password) {
			$auth_info .= $camera->password;
		}
		if($auth_info !== '') {
			$file_data .= 'netcam_userpass '.$auth_info."\n";
		}
		$file_data .= 'target_dir '.CAMERA_DATA_PATH.'/'.$camera->id."/history\n";
		$file_data .= "snapshot_filename %Y-%m-%d/%v/%v_%Y-%m-%d_%H-%M-%S-snapshot\n";
		$file_data .= "jpeg_filename %Y-%m-%d/%v/%v_%Y-%m-%d_%H-%M-%S_%q\n";
		$file_data .= "movie_filename %Y-%m-%d/%v/%v_%Y-%m-%d_%H-%M-%S\n";

		$path = CAMERA_DATA_PATH.'/'.$camera->id.'/motion-'.$camera->id.'.conf';
		file_put_contents($path, $file_data);
		chmod($path, 0775);
		return $path;
	}

	function addThread($motion_id, $camera_config) {
		$motion_data = loadMotionData($motion_id);
		$config_file_data = file_get_contents($motion_data->config_file);
		$config_val = "\nthread ".$camera_config."\n";
		if(strpos($config_file_data, $config_val) === FALSE) {
			file_put_contents($motion_data->config_file, $config_val, FILE_APPEND);
			restartMotion($motion_data);
		}
		else {
		}
	}

	function restartMotion($motion_data) {
		file_get_contents($motion_data->url.'/0/action/restart');
	}

	function removeThread($motion_id, $camera_config) {
		$motion_data = loadMotionData($motion_id);
		$config_file_data = file_get_contents($motion_data->config_file);
		$config_val = "\nthread ".$camera_config."\n";
		if(strpos($config_file_data, $config_val) === FALSE) {

		}
		else {
			copy($motion_data->config_file, BACKUP_DATA_PATH.'/'.time().'_motion.conf');
			$new_config = str_replace($config_val, "\n; thread ".$camera_config."\n", $config_file_data);
			file_put_contents($motion_data->config_file, $new_config);
			restartMotion($motion_data);
		}
	}


?>